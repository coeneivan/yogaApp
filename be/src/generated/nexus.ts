/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddPoseToSequenceInput: { // input type
    order: number; // Int!
    poseId: number; // Int!
    sequenceId: number; // Int!
  }
  CreateSequenceInput: { // input type
    description: string; // String!
    name: string; // String!
  }
  PoseCreateInput: { // input type
    englishName: string; // String!
    imageUrl: string; // String!
    name: string; // String!
  }
}

export interface NexusGenEnums {
  SortOrder: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {};
  Pose: { // root type
    englishName: string; // String!
    foundInSequences?: Array<NexusGenRootTypes['PosesInSequences'] | null> | null; // [PosesInSequences]
    id: number; // Int!
    imageUrl?: string | null; // String
    name: string; // String!
  }
  PosesInSequences: { // root type
    order: number; // Int!
    pose: NexusGenRootTypes['Pose']; // Pose!
    sequence: NexusGenRootTypes['Sequence']; // Sequence!
  }
  Query: {};
  Sequence: { // root type
    description?: string | null; // String
    id: number; // Int!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    AddPoseToSequence: NexusGenRootTypes['PosesInSequences']; // PosesInSequences!
    CreateSequence: NexusGenRootTypes['Sequence']; // Sequence!
  }
  Pose: { // field return type
    englishName: string; // String!
    foundInSequences: Array<NexusGenRootTypes['PosesInSequences'] | null> | null; // [PosesInSequences]
    id: number; // Int!
    imageUrl: string | null; // String
    name: string; // String!
  }
  PosesInSequences: { // field return type
    order: number; // Int!
    pose: NexusGenRootTypes['Pose']; // Pose!
    sequence: NexusGenRootTypes['Sequence']; // Sequence!
  }
  Query: { // field return type
    allPoses: Array<NexusGenRootTypes['Pose'] | null> | null; // [Pose]
    allSequences: Array<NexusGenRootTypes['Sequence'] | null> | null; // [Sequence]
    oneSequence: NexusGenRootTypes['Sequence'] | null; // Sequence
  }
  Sequence: { // field return type
    description: string | null; // String
    id: number; // Int!
    name: string; // String!
    poses: Array<NexusGenRootTypes['PosesInSequences'] | null> | null; // [PosesInSequences]
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    AddPoseToSequence: 'PosesInSequences'
    CreateSequence: 'Sequence'
  }
  Pose: { // field return type name
    englishName: 'String'
    foundInSequences: 'PosesInSequences'
    id: 'Int'
    imageUrl: 'String'
    name: 'String'
  }
  PosesInSequences: { // field return type name
    order: 'Int'
    pose: 'Pose'
    sequence: 'Sequence'
  }
  Query: { // field return type name
    allPoses: 'Pose'
    allSequences: 'Sequence'
    oneSequence: 'Sequence'
  }
  Sequence: { // field return type name
    description: 'String'
    id: 'Int'
    name: 'String'
    poses: 'PosesInSequences'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    AddPoseToSequence: { // args
      data: NexusGenInputs['AddPoseToSequenceInput']; // AddPoseToSequenceInput!
    }
    CreateSequence: { // args
      data: NexusGenInputs['CreateSequenceInput']; // CreateSequenceInput!
    }
  }
  Query: {
    oneSequence: { // args
      id?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}